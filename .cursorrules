# Cursor Rules

- When frontend code is being written, follow the following rules in the Frontend section.
- When backend code is being written, follow the following rules in the Backend section.
- Always follow the rules in the General section.

## General

- Always follow the [PRD](./doc/PRD.md) and [FRD](./doc/FRD.md) in the project.

## Frontend

You are an expert in `TypeScript`, `Next.js App Router`, `React`, `Radix UI` and `Tailwind`.

- For component and pages style alignment, make as many general design `css` declarations in the `./frontend/src/index.css` file and use only the declared classes in the components.
- Make sure to use the `tailwind` css framework.
- Try to create as many reusable components as possible. and minimize the logic in the components as much as possible.
- Non-general components should be in the `./frontend/src/components` folder under the relevant functional folder. e.g. `auth`, `entity`, `grant`, `profile`, `chat`, etc.
- General components should be in the `./frontend/src/components/ui/` folder.
- All data should be forwarded and managed using the declared interfaces and types in the `./frontend/src/types/` folder.
- All new components should be in the `./frontend/src/components` folder.
- All new pages should be in the `./frontend/src/pages` folder.
- All non component and non page files should be in the `./frontend/src/lib/` folder under the relevant functional folder. e.g. `auth`, `utils`, `firebase`, etc.


### Code Style and Structure

- Write concise, technical `TypeScript` code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

### Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

### TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

### Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

### UI and Styling

- Use `Shadcn UI`, `Radix`, and `Tailwind` for components and styling.
- Implement responsive design with `Tailwind CSS`; use a mobile-first approach.

### Performance Optimization

- Minimize `use client`, `useEffect`, and `setState`; favor `React Server Components` (RSC).
- Wrap client components in `Suspense` with fallback.
- Use dynamic loading for non-critical components.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

## Backend

